{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('bootstrap_paragraphs/bootstrap-paragraphs') }}
{% if paragraph.bundle == 'bp_columns' %}
  {{ attach_library('bootstrap_paragraphs/bp-columns') }}
{% endif %}

{# Renders Width field. #}
{# Sets class name from values in database. #}
{% if content.bp_width|render %}
  {% set layout_width = content.bp_width['#items'].getString() %}
  {% set layout_width_classes = [
    'paragraph--width--tiny' == layout_width ? 'paragraph--width--tiny',
    'paragraph--width--narrow' == layout_width ? 'paragraph--width--narrow',
    'paragraph--width--medium' == layout_width ? 'paragraph--width--medium',
    'paragraph--width--wide' == layout_width ? 'paragraph--width--wide',
    'paragraph--width--full' == layout_width ? 'paragraph--width--full',
  ]
  %}
{% endif %}

{# Renders Background field. #}
{# Sets class name from values in database. #}
{% set background_class_string = '' %}
{% if paragraph.bp_background.value is not empty %}
  {% set background_class_string = 'paragraph--color ' ~ paragraph.bp_background.value %}
{% endif %}

{# The template default set classes. #}
{# Sets Paragraph ID as class. #}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
background_class_string,
'paragraph--id--' ~ paragraph.id.value,
]
%}


{# Merges Width field with classes. #}
{% set width_field = content.bp_width|render %}
{% if width_field %}
  {% set classes = classes|merge(layout_width_classes) %}
{% endif %}

{% set border_class_string = '' %}
{% if paragraph.border_top_color.value is not empty %}
  {% set border_class_string = 'border' ~ paragraph.border_top_color.value %}
{% endif %}

{% set padding_top_class_string = '' %}
{% if paragraph.field_padding_top.value is not empty %}
  {% set padding_top_class_string = paragraph.field_padding_top.value %}
{% endif %}

{% set padding_bottom_class_string = '' %}
{% if paragraph.field_padding_bottom.value is not empty %}
  {% set padding_bottom_class_string = paragraph.field_padding_bottom.value %}
{% endif %}

{% set animated_class_string = '' %}
{% if paragraph.animation.value is not empty %}
  {% set animated_class_string = 'wow animated ' ~ paragraph.animation.value %}
{% endif %}

{% set animated_speed_class_string = '' %}
{% if paragraph.animation_setting.value is not empty %}
  {% set animated_speed_class_string = paragraph.animation_setting.value %}
{% endif %}

{%
set paragraphclass = [
'paragraph__column',
border_class_string,
padding_top_class_string,
padding_bottom_class_string,
animated_class_string,
animated_speed_class_string,
]
%}

{# Prints div with classes, and content without Width and Background. #}

<div {{ attributes.addClass(classes) }}>
  <div {{ attributes.addClass(paragraphclass).removeClass(classes) }}>
    <div class="owl-carousel owl-theme owl-loaded owl-drag owl-grab">
      {{ title_suffix }}
      {{ content|without('bp_width', 'bp_background' , 'field_padding_top' , 'field_padding_bottom' , 'border_top_color' , 'animation' , 'animation_setting') }}
    </div>
  </div>
</div>
